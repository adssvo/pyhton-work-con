
{ "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6COM1034 Concurrency in-class test\n",
    "\n",
    "Instructions:\n",
    "* Use Shift-enter to run a code cell. \n",
    "* Use \"Enter\" on a text cell to start editing. Use \"Shift-enter\" When you're done editing.\n",
    "* Work on one question at a time. Do not use \"Run all\".\n",
    "* In case of problems, seek the help of an invigilator. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "There are 100 marks to be gained in 9 questions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 1 \n",
    "\n",
    "The code below retrieves the front page of a list of social media sites. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://www.facebook.com/, 0.376 s\n",
      "http://www.instagram.com/, 0.216 s\n",
      "http://www.pinterest.com/, 1.066 s\n",
      "http://www.twitter.com/, 0.713 s\n",
      "getting content took 2.373 seconds\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import time\n",
    "\n",
    "sites = [\"http://www.facebook.com/\",\n",
    "        \"http://www.instagram.com/\",\n",
    "        \"http://www.pinterest.com/\",\n",
    "        \"http://www.twitter.com/\"]\n",
    "\n",
    "def get_media(site):\n",
    "    \"\"\"\n",
    "    Retrieves the content of the given web site.\n",
    "    \n",
    "    Returns the time in seconds it took to retrieve it.\n",
    "    \"\"\"\n",
    "    tick = time.time()\n",
    "    try:\n",
    "        content = requests.get(site)\n",
    "    except:\n",
    "        print(\"Error when getting the news from {}. Nevermind.\".format(site))\n",
    "    tock = time.time()\n",
    "    duration = tock - tick\n",
    "    print(\"{}, {:.3f} s\".format(site, duration))\n",
    "    return duration\n",
    "\n",
    "tick = time.time()\n",
    "\n",
    "times = []\n",
    "\n",
    "for site in sites:\n",
    "    times.append(get_media(site))\n",
    "tock = time.time()\n",
    "duration = tock - tick\n",
    "print(\"getting content took {:.3f} seconds\".format(duration))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.1 (10 marks)\n",
    "Run the above code. How does the total time taken relate to the time required for each news site?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Type your answer here. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.2 (10 marks)\n",
    "Compare the time taken in total with the time taken for each site individually. Does this relation indicate a parallel or serial implementation? (Hint: you can also anaylse the code to judge whether it's parallel or serial)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Type your answer here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.3 (10 marks)\n",
    "The code below uses a concurrent approach to get content from multiple sites."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://www.instagram.com/, 0.232 s\n",
      "http://www.pinterest.com/, 0.343 s\n",
      "http://www.facebook.com/, 0.418 s\n",
      "http://www.twitter.com/, 0.629 s\n",
      "Getting content took 0.6318 seconds.\n"
     ]
    }
   ],
   "source": [
    "from multiprocessing.pool import ThreadPool\n",
    "tp = ThreadPool(4)\n",
    "\n",
    "tick = time.time()\n",
    "tp.map(get_media, sites)\n",
    "tock = time.time()\n",
    "print(\"Getting content took {:.4} seconds.\".format(tock-tick))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the code. Is the total time longer or shorter than the sum of individual times? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Type your answer here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.4 (10 marks)\n",
    "What is the parallel programming model  that is used to achieve the speedup?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Type your answer here. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.5 (10 marks)\n",
    "The speedup that we have seen with the concurrent implementation has been achieved because the I/O-bound tasks of getting content from the web have been..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d052ae3f21b1436db2d7125adaffa98a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "RadioButtons(options=('interleaved', 'interspersed', 'run on multiple cores'), value=None)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import ipywidgets as widgets\n",
    "widgets.RadioButtons(options=['interleaved', 'interspersed', 'run on multiple cores'], value=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2\n",
    "\n",
    "Consider the function below. It increments a number, shared among threads using the `global` keyword. The function takes one parameter, `count`, which specifies how often the number should be incremented by 1.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def increment(count):\n",
    "    global number\n",
    "    for i in range(count):\n",
    "        number = number + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2.1 (10 marks)\n",
    "There is a specific term in Concurrency for the variable `number`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a89a46ecaa2a47619e3d913b2fbfba09",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "RadioButtons(options=('shared variable', 'shared state', 'deep state', 'stateful'), value=None)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Run the cell to see multiple choice options.\n",
    "import ipywidgets as widgets\n",
    "widgets.RadioButtons(options=['shared variable', 'shared state', 'deep state', 'stateful'], value=None)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2.2 (10 marks)\n",
    "\n",
    "The code below uses a `ThreadPool` to concurrently call `increment(100000)` 10 times. Hence, `number` is incremented 10\\*100,000 = 1,000,000 times in total. Run the code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the final number is: 300000\n"
     ]
    }
   ],
   "source": [
    "from multiprocessing.pool import ThreadPool\n",
    "number = 0\n",
    "num_threads = 10\n",
    "tp = ThreadPool(num_threads)\n",
    "results = []\n",
    "for i in range(num_threads):\n",
    "    result = tp.apply_async(increment, args=(100000,))\n",
    "    results.append(result)\n",
    "\n",
    "for r in results:\n",
    "    r.wait()\n",
    "print(\"the final number is: {}\".format(number))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2.3 (10 marks)\n",
    "There is a problem: the number has been incremented 1,000,000 times, but the final result is lower than that. This is because the code suffers from a Concurrency problem called a... "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "46ee2b28044d4d00bf303c24020d8b58",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "RadioButtons(options=('arithmetic fault', 'parallel condition', 'race condition', 'synchronized condition'), v…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Run the cell to see multiple choice options.\n",
    "import ipywidgets as widgets\n",
    "widgets.RadioButtons(options=['arithmetic fault',\n",
    "                              'parallel condition',\n",
    "                              'race condition',\n",
    "                              'synchronized condition'], value=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2.4 (20 marks)\n",
    "In the code below, use a `Lock()` to protect the critical section and prevent the problem in the `increment` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the final number is: 388311\n"
     ]
    }
   ],
   "source": [
    "from threading import Lock\n",
    "\n",
    "def increment(count):\n",
    "    global number\n",
    "    for i in range(count):\n",
    "        number = number + 1\n",
    "\n",
    "from multiprocessing.pool import ThreadPool\n",
    "number = 0\n",
    "num_threads = 10\n",
    "tp = ThreadPool(num_threads)\n",
    "results = []\n",
    "for i in range(num_threads):\n",
    "    result = tp.apply_async(increment, args=(100000,))\n",
    "    results.append(result)\n",
    "\n",
    "for r in results:\n",
    "    r.wait()\n",
    "print(\"the final number is: {}\".format(number))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
